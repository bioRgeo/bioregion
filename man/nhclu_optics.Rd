% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hclu_optics.R
\name{nhclu_optics}
\alias{nhclu_optics}
\title{Non hierarchical clustering: OPTICS}
\usage{
nhclu_optics(
  distances,
  index = names(distances)[3],
  minPts = NULL,
  eps = NULL,
  xi = 0.05,
  minimum = FALSE,
  show_hierarchy = FALSE,
  ...
)
}
\arguments{
\item{distances}{the output object from \code{\link{similarity_to_distance}},
a \code{data.frame} with the first columns called "Site1" and "Site2", and
the other columns being the distance indices or a \code{dist} object}

\item{index}{a \code{character} string providing the name of the distance
index to use, corresponding to the column
name in \code{distances}. By default, the third column name of
 \code{distances} is used.}

\item{minPts}{a \code{numeric} value specifying the minPts argument
of \link[dbscan:dbscan]{dbscan::dbscan()}). minPts is the minimum number of
points to form a dense region.
By default, it is set to the
natural logarithm of the number of sites in \code{distances}.}

\item{eps}{a \code{numeric} value specifying the eps argument
of \link[dbscan:optics]{dbscan::optics()}). It is the upper limit of the size
of the epsilon neighborhood. Limiting the neighborhood size improves
performance and has no or very little impact on the ordering as long as it
is not set too low. If not specified (default behaviour), the largest
minPts-distance in the
data set is used which gives the same result as infinity.}

\item{xi}{a \code{numeric} value specifying the steepness threshold to
identify clusters hierarchically using the Xi method
(see \link[dbscan:optics]{dbscan::optics()})}

\item{minimum}{a \code{boolean} specifying if the hierarchy should be pruned
out from the output to only keep clusters at the "minimal" level, i.e.
only leaf / non-overlapping clusters.
If \code{TRUE}, then argument \code{show_hierarchy} should be \code{FALSE}}

\item{show_hierarchy}{a \code{boolean} specifying if the hierarchy of
clusters should be included in the output. By default, the hierarchy is not
visible in the clusters obtained from OPTICS - it can only be visualised by
visualising the plot of the OPTICS object. If \code{show_hierarchy = TRUE},
then the output cluster \code{data.frame} will contain additional columns
showing the hierarchy of clusters.}

\item{...}{you can add here further arguments to be passed to \code{optics()}
(see \link[dbscan:optics]{dbscan::optics()})}
}
\value{
A \code{list} of class \code{bioRgeo.clusters} with five slots:
\enumerate{
\item{\bold{name}: \code{character string} containing the name of the algorihtm}
\item{\bold{args}: \code{list} of input arguments as provided by the user}
\item{\bold{inputs}: \code{list} of characteristics of the input dataset}
\item{\bold{algorithm}: \code{list} of all objects associated with the
 clustering procedure, such as original cluster objects}
\item{\bold{clusters}: \code{data.frame} containing the clustering results}}
}
\description{
This function performs semi-hierarchical
clustering on the basis of distances with the OPTICS algorithm (Ordering
Points To Identify the Clustering Structure)
}
\details{
The optics (Ordering points to identify the clustering
 structure) is a semi-hierarchical clustering algorithm which orders the
 points in the dataset such that points which are closest become neighbours,
 and calculates a reachability distance for each point. Then, clusters
 can be extracted in a hierarchical manner from this reachability distance,
 by identifying clusters depending on changes in the relative cluster
 density. The reachability plot should be explored to understand
 the clusters and their hierarchical nature, by running plot on the output
 of the function: \code{plot(object$algorithm$optics)}.
 We recommend reading \insertCite{Hahsler2019}{bioRgeo} to grasp the
 algorithm, how it works, and what the clusters mean.

 To extract the clusters, we use the
 \link[dbscan:extractXi]{dbscan::extractXi()} function which is based on
 the steepness of the reachability plot
 (see \link[dbscan:optics]{dbscan::optics()})
}
\examples{
simil <- similarity(vegemat, metric = "all")
distances <- similarity_to_distance(simil)

clust1 <- nhclu_optics(distances,
    index = "Simpson")
clust1
head(clust1$clusters)

# Visualise the optics plot (the hierarchy of clusters is illustrated at the bottom)
plot(clust1$algorithm$optics)

# Extract the hierarchy of clusters
clust1 <- nhclu_optics(distances,
    index = "Simpson",
    show_hierarchy = TRUE)
clust1
head(clust1$clusters)
}
