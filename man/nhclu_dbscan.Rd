% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nhclu_dbscan.R
\name{nhclu_dbscan}
\alias{nhclu_dbscan}
\title{Non hierarchical clustering: partitioning around medoids}
\usage{
nhclu_dbscan(
  distances,
  index = names(distances)[3],
  minPts = NULL,
  eps = NULL,
  plot = TRUE,
  ...
)
}
\arguments{
\item{distances}{the output object from \code{\link{similarity_to_distance}},
a \code{data.frame} with the first columns called "Site1" and "Site2", and
the other columns being the distance indices or a \code{dist} object}

\item{index}{a \code{character} string providing the name of the distance
index to use, corresponding to the column
name in \code{distances}. By default, the third column name of
 \code{distances} is used.}

\item{minPts}{a \code{numeric} value specifying the minPts argument
of \link[dbscan:dbscan]{dbscan::dbscan()}). By default, it is set to the
natural logarithm of the number of sites in \code{distances}.}

\item{eps}{a \code{numeric} value specifying the eps argument
of \link[dbscan:dbscan]{dbscan::dbscan()}). The value of eps depends on the
minPts argument, and should be chosen by identifying a knee in the k-nearest
neighbour distance plot. By default the function will try to automatically
find a knee, but the result is uncertain, and so the user should inspect the
graph and modify \code{dbscan_eps} accordingly.}

\item{plot}{a \code{boolean} indicating if the  k-nearest
neighbour distance plot should be plotted.}

\item{...}{you can add here further arguments to be passed to \code{dbscan()}
(see \link[dbscan:dbscan]{dbscan::dbscan()})}
}
\value{
A \code{list} of class \code{bioRgeo.clusters} with five slots:
\enumerate{
\item{\bold{name}: \code{character string} containing the name of the algorihtm}
\item{\bold{args}: \code{list} of input arguments as provided by the user}
\item{\bold{inputs}: \code{list} of characteristics of the input dataset}
\item{\bold{algorithm}: \code{list} of all objects associated with the
 clustering procedure, such as original cluster objects}
\item{\bold{clusters}: \code{data.frame} containing the clustering results}}
}
\description{
This function performs non hierarchical
clustering on the basis of distances with partioning around medoids.
}
\details{
The dbscan (Density-based spatial clustering of
 applications with noise) clustering algorithm clusters points on the basis
 of the density of neighbours around each data points. It necessitates two
 main arguments, minPts, which stands for the minimum number of points to
 identify a core, and eps, which is the radius to find neighbours.
 minPts and eps should be defined by the user, which is not straightforward.
 We recommend reading the help in \link[dbscan:dbscan]{dbscan::dbscan()})
 to learn how to set these arguments, as well as the paper
 \insertCite{Hahsler2019}{bioRgeo}. Note that clusters with a value of 0
 are points which were deemed as noise by the algorithm.

 By default the function will select values for \code{minPts} and
 \code{eps}. However, these values can be inadequate and the users is advised
 to tune these values by running the function multiple times.
}
\examples{
simil <- similarity(vegemat, metric = "all")
distances <- similarity_to_distance(simil)

clust1 <- nhclu_dbscan(distances,
    index = "Simpson")
clust2 <- nhclu_dbscan(distances,
    n_clust = 2:25,
    index = "Simpson")
partition_metrics(clust2,
                  distances = distances,
                  eval_metric = "pc_distance",
                  partition_optimisation = TRUE)
partition_metrics(clust2,
                  sp_site_table = vegemat,
                  eval_metric = "avg_endemism",
                  partition_optimisation = TRUE)
}
