// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// abc
NumericMatrix abc(NumericMatrix comat);
RcppExport SEXP _bioRgeo_abc(SEXP comatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type comat(comatSEXP);
    rcpp_result_gen = Rcpp::wrap(abc(comat));
    return rcpp_result_gen;
END_RCPP
}
// prodmat
SEXP prodmat(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _bioRgeo_prodmat(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(prodmat(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bioRgeo_abc", (DL_FUNC) &_bioRgeo_abc, 1},
    {"_bioRgeo_prodmat", (DL_FUNC) &_bioRgeo_prodmat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bioRgeo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
